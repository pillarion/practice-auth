// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mock

//go:generate minimock -i github.com/pillarion/practice-auth/internal/core/port/repository/config.Config -o config_minimock.go -n ConfigMock -p mock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	ecfg "github.com/pillarion/practice-auth/internal/core/entity/config"
)

// ConfigMock implements config.Config
type ConfigMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGet          func() (cp1 *ecfg.Config, err error)
	inspectFuncGet   func()
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mConfigMockGet
}

// NewConfigMock returns a mock for config.Config
func NewConfigMock(t minimock.Tester) *ConfigMock {
	m := &ConfigMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMock = mConfigMockGet{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mConfigMockGet struct {
	mock               *ConfigMock
	defaultExpectation *ConfigMockGetExpectation
	expectations       []*ConfigMockGetExpectation
}

// ConfigMockGetExpectation specifies expectation struct of the Config.Get
type ConfigMockGetExpectation struct {
	mock *ConfigMock

	results *ConfigMockGetResults
	Counter uint64
}

// ConfigMockGetResults contains results of the Config.Get
type ConfigMockGetResults struct {
	cp1 *ecfg.Config
	err error
}

// Expect sets up expected params for Config.Get
func (mmGet *mConfigMockGet) Expect() *mConfigMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ConfigMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ConfigMockGetExpectation{}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the Config.Get
func (mmGet *mConfigMockGet) Inspect(f func()) *mConfigMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for ConfigMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by Config.Get
func (mmGet *mConfigMockGet) Return(cp1 *ecfg.Config, err error) *ConfigMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ConfigMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ConfigMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &ConfigMockGetResults{cp1, err}
	return mmGet.mock
}

// Set uses given function f to mock the Config.Get method
func (mmGet *mConfigMockGet) Set(f func() (cp1 *ecfg.Config, err error)) *ConfigMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the Config.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the Config.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// Get implements config.Config
func (mmGet *ConfigMock) Get() (cp1 *ecfg.Config, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet()
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the ConfigMock.Get")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet()
	}
	mmGet.t.Fatalf("Unexpected call to ConfigMock.Get.")
	return
}

// GetAfterCounter returns a count of finished ConfigMock.Get invocations
func (mmGet *ConfigMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of ConfigMock.Get invocations
func (mmGet *ConfigMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *ConfigMock) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *ConfigMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to ConfigMock.Get")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to ConfigMock.Get")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to ConfigMock.Get")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ConfigMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ConfigMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ConfigMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetDone()
}
