// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mock

//go:generate minimock -i github.com/pillarion/practice-auth/internal/core/port/service/user.Service -o service_minimock.go -n ServiceMock -p mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	desc "github.com/pillarion/practice-auth/internal/core/model/user"
)

// ServiceMock implements user.Service
type ServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreate          func(ctx context.Context, user *desc.Info) (i1 int64, err error)
	inspectFuncCreate   func(ctx context.Context, user *desc.Info)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mServiceMockCreate

	funcDelete          func(ctx context.Context, id int64) (err error)
	inspectFuncDelete   func(ctx context.Context, id int64)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mServiceMockDelete

	funcGet          func(ctx context.Context, id int64) (up1 *desc.User, err error)
	inspectFuncGet   func(ctx context.Context, id int64)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mServiceMockGet

	funcUpdate          func(ctx context.Context, user *desc.Info) (err error)
	inspectFuncUpdate   func(ctx context.Context, user *desc.Info)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mServiceMockUpdate
}

// NewServiceMock returns a mock for user.Service
func NewServiceMock(t minimock.Tester) *ServiceMock {
	m := &ServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mServiceMockCreate{mock: m}
	m.CreateMock.callArgs = []*ServiceMockCreateParams{}

	m.DeleteMock = mServiceMockDelete{mock: m}
	m.DeleteMock.callArgs = []*ServiceMockDeleteParams{}

	m.GetMock = mServiceMockGet{mock: m}
	m.GetMock.callArgs = []*ServiceMockGetParams{}

	m.UpdateMock = mServiceMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*ServiceMockUpdateParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mServiceMockCreate struct {
	mock               *ServiceMock
	defaultExpectation *ServiceMockCreateExpectation
	expectations       []*ServiceMockCreateExpectation

	callArgs []*ServiceMockCreateParams
	mutex    sync.RWMutex
}

// ServiceMockCreateExpectation specifies expectation struct of the Service.Create
type ServiceMockCreateExpectation struct {
	mock    *ServiceMock
	params  *ServiceMockCreateParams
	results *ServiceMockCreateResults
	Counter uint64
}

// ServiceMockCreateParams contains parameters of the Service.Create
type ServiceMockCreateParams struct {
	ctx  context.Context
	user *desc.Info
}

// ServiceMockCreateResults contains results of the Service.Create
type ServiceMockCreateResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for Service.Create
func (mmCreate *mServiceMockCreate) Expect(ctx context.Context, user *desc.Info) *mServiceMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ServiceMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &ServiceMockCreateParams{ctx, user}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the Service.Create
func (mmCreate *mServiceMockCreate) Inspect(f func(ctx context.Context, user *desc.Info)) *mServiceMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for ServiceMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by Service.Create
func (mmCreate *mServiceMockCreate) Return(i1 int64, err error) *ServiceMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ServiceMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &ServiceMockCreateResults{i1, err}
	return mmCreate.mock
}

// Set uses given function f to mock the Service.Create method
func (mmCreate *mServiceMockCreate) Set(f func(ctx context.Context, user *desc.Info) (i1 int64, err error)) *ServiceMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the Service.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the Service.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the Service.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mServiceMockCreate) When(ctx context.Context, user *desc.Info) *ServiceMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ServiceMock.Create mock is already set by Set")
	}

	expectation := &ServiceMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &ServiceMockCreateParams{ctx, user},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up Service.Create return parameters for the expectation previously defined by the When method
func (e *ServiceMockCreateExpectation) Then(i1 int64, err error) *ServiceMock {
	e.results = &ServiceMockCreateResults{i1, err}
	return e.mock
}

// Create implements user.Service
func (mmCreate *ServiceMock) Create(ctx context.Context, user *desc.Info) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, user)
	}

	mm_params := ServiceMockCreateParams{ctx, user}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := ServiceMockCreateParams{ctx, user}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("ServiceMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the ServiceMock.Create")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, user)
	}
	mmCreate.t.Fatalf("Unexpected call to ServiceMock.Create. %v %v", ctx, user)
	return
}

// CreateAfterCounter returns a count of finished ServiceMock.Create invocations
func (mmCreate *ServiceMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of ServiceMock.Create invocations
func (mmCreate *ServiceMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to ServiceMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mServiceMockCreate) Calls() []*ServiceMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*ServiceMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *ServiceMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *ServiceMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ServiceMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ServiceMock.Create")
		} else {
			m.t.Errorf("Expected call to ServiceMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to ServiceMock.Create")
	}
}

type mServiceMockDelete struct {
	mock               *ServiceMock
	defaultExpectation *ServiceMockDeleteExpectation
	expectations       []*ServiceMockDeleteExpectation

	callArgs []*ServiceMockDeleteParams
	mutex    sync.RWMutex
}

// ServiceMockDeleteExpectation specifies expectation struct of the Service.Delete
type ServiceMockDeleteExpectation struct {
	mock    *ServiceMock
	params  *ServiceMockDeleteParams
	results *ServiceMockDeleteResults
	Counter uint64
}

// ServiceMockDeleteParams contains parameters of the Service.Delete
type ServiceMockDeleteParams struct {
	ctx context.Context
	id  int64
}

// ServiceMockDeleteResults contains results of the Service.Delete
type ServiceMockDeleteResults struct {
	err error
}

// Expect sets up expected params for Service.Delete
func (mmDelete *mServiceMockDelete) Expect(ctx context.Context, id int64) *mServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ServiceMockDeleteExpectation{}
	}

	mmDelete.defaultExpectation.params = &ServiceMockDeleteParams{ctx, id}
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the Service.Delete
func (mmDelete *mServiceMockDelete) Inspect(f func(ctx context.Context, id int64)) *mServiceMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for ServiceMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by Service.Delete
func (mmDelete *mServiceMockDelete) Return(err error) *ServiceMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ServiceMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &ServiceMockDeleteResults{err}
	return mmDelete.mock
}

// Set uses given function f to mock the Service.Delete method
func (mmDelete *mServiceMockDelete) Set(f func(ctx context.Context, id int64) (err error)) *ServiceMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the Service.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the Service.Delete method")
	}

	mmDelete.mock.funcDelete = f
	return mmDelete.mock
}

// When sets expectation for the Service.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mServiceMockDelete) When(ctx context.Context, id int64) *ServiceMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ServiceMock.Delete mock is already set by Set")
	}

	expectation := &ServiceMockDeleteExpectation{
		mock:   mmDelete.mock,
		params: &ServiceMockDeleteParams{ctx, id},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up Service.Delete return parameters for the expectation previously defined by the When method
func (e *ServiceMockDeleteExpectation) Then(err error) *ServiceMock {
	e.results = &ServiceMockDeleteResults{err}
	return e.mock
}

// Delete implements user.Service
func (mmDelete *ServiceMock) Delete(ctx context.Context, id int64) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, id)
	}

	mm_params := ServiceMockDeleteParams{ctx, id}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, &mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_got := ServiceMockDeleteParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("ServiceMock.Delete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the ServiceMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, id)
	}
	mmDelete.t.Fatalf("Unexpected call to ServiceMock.Delete. %v %v", ctx, id)
	return
}

// DeleteAfterCounter returns a count of finished ServiceMock.Delete invocations
func (mmDelete *ServiceMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of ServiceMock.Delete invocations
func (mmDelete *ServiceMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to ServiceMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mServiceMockDelete) Calls() []*ServiceMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*ServiceMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *ServiceMock) MinimockDeleteDone() bool {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteInspect logs each unmet expectation
func (m *ServiceMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ServiceMock.Delete with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ServiceMock.Delete")
		} else {
			m.t.Errorf("Expected call to ServiceMock.Delete with params: %#v", *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		m.t.Error("Expected call to ServiceMock.Delete")
	}
}

type mServiceMockGet struct {
	mock               *ServiceMock
	defaultExpectation *ServiceMockGetExpectation
	expectations       []*ServiceMockGetExpectation

	callArgs []*ServiceMockGetParams
	mutex    sync.RWMutex
}

// ServiceMockGetExpectation specifies expectation struct of the Service.Get
type ServiceMockGetExpectation struct {
	mock    *ServiceMock
	params  *ServiceMockGetParams
	results *ServiceMockGetResults
	Counter uint64
}

// ServiceMockGetParams contains parameters of the Service.Get
type ServiceMockGetParams struct {
	ctx context.Context
	id  int64
}

// ServiceMockGetResults contains results of the Service.Get
type ServiceMockGetResults struct {
	up1 *desc.User
	err error
}

// Expect sets up expected params for Service.Get
func (mmGet *mServiceMockGet) Expect(ctx context.Context, id int64) *mServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ServiceMockGetExpectation{}
	}

	mmGet.defaultExpectation.params = &ServiceMockGetParams{ctx, id}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the Service.Get
func (mmGet *mServiceMockGet) Inspect(f func(ctx context.Context, id int64)) *mServiceMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for ServiceMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by Service.Get
func (mmGet *mServiceMockGet) Return(up1 *desc.User, err error) *ServiceMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ServiceMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &ServiceMockGetResults{up1, err}
	return mmGet.mock
}

// Set uses given function f to mock the Service.Get method
func (mmGet *mServiceMockGet) Set(f func(ctx context.Context, id int64) (up1 *desc.User, err error)) *ServiceMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the Service.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the Service.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the Service.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mServiceMockGet) When(ctx context.Context, id int64) *ServiceMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ServiceMock.Get mock is already set by Set")
	}

	expectation := &ServiceMockGetExpectation{
		mock:   mmGet.mock,
		params: &ServiceMockGetParams{ctx, id},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up Service.Get return parameters for the expectation previously defined by the When method
func (e *ServiceMockGetExpectation) Then(up1 *desc.User, err error) *ServiceMock {
	e.results = &ServiceMockGetResults{up1, err}
	return e.mock
}

// Get implements user.Service
func (mmGet *ServiceMock) Get(ctx context.Context, id int64) (up1 *desc.User, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, id)
	}

	mm_params := ServiceMockGetParams{ctx, id}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_got := ServiceMockGetParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("ServiceMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the ServiceMock.Get")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, id)
	}
	mmGet.t.Fatalf("Unexpected call to ServiceMock.Get. %v %v", ctx, id)
	return
}

// GetAfterCounter returns a count of finished ServiceMock.Get invocations
func (mmGet *ServiceMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of ServiceMock.Get invocations
func (mmGet *ServiceMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to ServiceMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mServiceMockGet) Calls() []*ServiceMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*ServiceMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *ServiceMock) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *ServiceMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ServiceMock.Get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ServiceMock.Get")
		} else {
			m.t.Errorf("Expected call to ServiceMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to ServiceMock.Get")
	}
}

type mServiceMockUpdate struct {
	mock               *ServiceMock
	defaultExpectation *ServiceMockUpdateExpectation
	expectations       []*ServiceMockUpdateExpectation

	callArgs []*ServiceMockUpdateParams
	mutex    sync.RWMutex
}

// ServiceMockUpdateExpectation specifies expectation struct of the Service.Update
type ServiceMockUpdateExpectation struct {
	mock    *ServiceMock
	params  *ServiceMockUpdateParams
	results *ServiceMockUpdateResults
	Counter uint64
}

// ServiceMockUpdateParams contains parameters of the Service.Update
type ServiceMockUpdateParams struct {
	ctx  context.Context
	user *desc.Info
}

// ServiceMockUpdateResults contains results of the Service.Update
type ServiceMockUpdateResults struct {
	err error
}

// Expect sets up expected params for Service.Update
func (mmUpdate *mServiceMockUpdate) Expect(ctx context.Context, user *desc.Info) *mServiceMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("ServiceMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &ServiceMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &ServiceMockUpdateParams{ctx, user}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the Service.Update
func (mmUpdate *mServiceMockUpdate) Inspect(f func(ctx context.Context, user *desc.Info)) *mServiceMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for ServiceMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by Service.Update
func (mmUpdate *mServiceMockUpdate) Return(err error) *ServiceMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("ServiceMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &ServiceMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &ServiceMockUpdateResults{err}
	return mmUpdate.mock
}

// Set uses given function f to mock the Service.Update method
func (mmUpdate *mServiceMockUpdate) Set(f func(ctx context.Context, user *desc.Info) (err error)) *ServiceMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the Service.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the Service.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the Service.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mServiceMockUpdate) When(ctx context.Context, user *desc.Info) *ServiceMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("ServiceMock.Update mock is already set by Set")
	}

	expectation := &ServiceMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &ServiceMockUpdateParams{ctx, user},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up Service.Update return parameters for the expectation previously defined by the When method
func (e *ServiceMockUpdateExpectation) Then(err error) *ServiceMock {
	e.results = &ServiceMockUpdateResults{err}
	return e.mock
}

// Update implements user.Service
func (mmUpdate *ServiceMock) Update(ctx context.Context, user *desc.Info) (err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, user)
	}

	mm_params := ServiceMockUpdateParams{ctx, user}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, &mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := ServiceMockUpdateParams{ctx, user}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("ServiceMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the ServiceMock.Update")
		}
		return (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, user)
	}
	mmUpdate.t.Fatalf("Unexpected call to ServiceMock.Update. %v %v", ctx, user)
	return
}

// UpdateAfterCounter returns a count of finished ServiceMock.Update invocations
func (mmUpdate *ServiceMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of ServiceMock.Update invocations
func (mmUpdate *ServiceMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to ServiceMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mServiceMockUpdate) Calls() []*ServiceMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*ServiceMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *ServiceMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *ServiceMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ServiceMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ServiceMock.Update")
		} else {
			m.t.Errorf("Expected call to ServiceMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to ServiceMock.Update")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateInspect()

			m.MinimockDeleteInspect()

			m.MinimockGetInspect()

			m.MinimockUpdateInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockDeleteDone() &&
		m.MinimockGetDone() &&
		m.MinimockUpdateDone()
}
